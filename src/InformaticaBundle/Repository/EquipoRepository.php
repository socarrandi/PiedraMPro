<?php

namespace InformaticaBundle\Repository;

/**
 * EquipoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EquipoRepository extends \Doctrine\ORM\EntityRepository
{       


        /*
        *  CANTIDAD EQUIPOS
        */
        public function countEquipo($unidad, $baja){

                $em = $this->getEntityManager();  

                $tipo_equipo = 'SELECT te FROM InformaticaBundle:TipoEquipo te WHERE te.ocultar=:ocultar ORDER BY te.id ASC';
                $tipo_equipo = $em->createQuery($tipo_equipo); 
                $tipo_equipo = $tipo_equipo
                            ->setParameter('ocultar', 0)
                            ->getResult();

                $array = array();

                foreach ($tipo_equipo as $tipo) {

                $cant_equipo = 'SELECT e.id FROM InformaticaBundle:Equipo e 
                            JOIN e.tipoEquipo te 
                            WHERE e.unidad=:unidad AND e.baja =:baja AND te.id=:id';
                $cant_equipo = $em->createQuery($cant_equipo); 
                $cant_equipo = $cant_equipo
                                ->setParameter('baja', $baja)
                                ->setParameter('id', $tipo->getId())
                                ->setParameter('unidad', $unidad)
                                ->getResult();

                $array[] = array(
                    'tipoEquipo'=> $tipo->getTipoEquipo(),
                    'cantidad' => ($cant_equipo != 0)?(count($cant_equipo)):'0',
                    'color' => $tipo->getColor()
                );

                }

                return $array;
        }

        /*
        *  CANTIDAD EQUIPOS por estado equipo
        */
        public function countByEstadoEquipo($unidad, $estado, $baja){

                $em = $this->getEntityManager();    

                $tipo_equipo = 'SELECT te FROM InformaticaBundle:TipoEquipo te WHERE te.ocultar=:ocultar ORDER BY te.id ASC';
                $tipo_equipo = $em->createQuery($tipo_equipo); 
                $tipo_equipo = $tipo_equipo
                            ->setParameter('ocultar', 0)
                            ->getResult();

                $array = array();

                foreach ($tipo_equipo as $tipo) {

                $cant_equipo = 'SELECT e.id FROM InformaticaBundle:Equipo e 
                            JOIN e.tipoEquipo te 
                            WHERE e.unidad=:unidad 
                            AND e.estadoEquipo =:estado 
                            AND e.baja=:baja 
                            AND te.id=:id
                            ';
                $cant_equipo = $em->createQuery($cant_equipo); 
                $cant_equipo = $cant_equipo
                                ->setParameter('estado', $estado)
                                ->setParameter('baja', $baja)      
                                 ->setParameter('id', $tipo->getId())                          
                                ->setParameter('unidad', $unidad)
                                ->getResult();

                $array[] = array(
                    'tipoEquipo'=> $tipo->getTipoEquipo(),
                    'cantidad' => ($cant_equipo != 0)?(count($cant_equipo)):'0',
                    'color' => $tipo->getColor()
                );

                }
                
                return $array;
        }
        
        /*
        * Listado Equipos Responsable
        */        
        public function getEquiposResponsable($id_responsable, $id_local){
                $em = $this->getEntityManager(); 
                if ($id_responsable != ''){
                   $equipos = 'SELECT e.id, te.id idE, te.tipoEquipo equipo FROM InformaticaBundle:Equipo e                            
                                        JOIN e.responsable r
                                        JOIN e.tipoEquipo te
                                        WHERE r.id =:id_resp GROUP BY te.id ORDER By e.id ASC';
                  $equipos = $em->createQuery($equipos); 
                  $equipos = $equipos
                                ->setParameter('id_resp', $id_responsable)
                                ->getResult();  

                }else{
                    $equipos = 'SELECT e.id, te.id idE, te.tipoEquipo equipo 
                                FROM InformaticaBundle:Equipo e 
                                JOIN e.tipoEquipo te 
                                JOIN e.responsable r
                                JOIN r.local l
                                WHERE l.id =:local
                                GROUP BY te.id ORDER By e.id ASC';
                    $equipos = $em->createQuery($equipos); 
                    $equipos = $equipos
                                    ->setParameter('local', $id_local)
                                    ->getResult();  
                }               
                return $equipos;     

        }

	/*
	* Listado de Equipos 
	*/
	public function getEquipos($baja, $unidad, $local, $tipo_equipo){
		$em = $this->getEntityManager(); 



        if ($local == null && $tipo_equipo == null){
            
            $equipos = 'SELECT e FROM InformaticaBundle:Equipo e   
                    JOIN e.responsable r                
                    WHERE e.baja =:baja 
                    AND e.unidad =:unidad ORDER By r.local ASC' ;
            $equipos = $em->createQuery($equipos); 
            $equipos = $equipos
                            ->setParameter('baja', $baja)
                            ->setParameter('unidad', $unidad)
                            ->getResult(); 

            
            return $equipos;           

        }else if ($local == null && $tipo_equipo != null){
            $equipos = 'SELECT e FROM InformaticaBundle:Equipo e   
                    JOIN e.responsable r                  
                    WHERE e.baja =:baja 
                    AND e.unidad =:unidad 
                    AND e.tipoEquipo=:tipo_equipo 
                    ORDER By r.local ASC';
            $equipos = $em->createQuery($equipos); 
            $equipos = $equipos
                        ->setParameter('baja', $baja)
                        ->setParameter('unidad', $unidad)
                        ->setParameter('tipo_equipo', $tipo_equipo)                      
                        ->getResult();
            return $equipos;

        }
        else if ($tipo_equipo == null && $local != null){
            $equipos = 'SELECT e FROM InformaticaBundle:Equipo e   
                    JOIN e.responsable r                  
                    WHERE e.baja =:baja 
                    AND e.unidad =:unidad 
                    AND r.local=:local ORDER By r.local ASC';
            $equipos = $em->createQuery($equipos); 
            $equipos = $equipos
                        ->setParameter('baja', $baja)
                        ->setParameter('unidad', $unidad)                       
                        ->setParameter('local', $local)
                        ->getResult();
            return $equipos;
        }
        else if ($tipo_equipo != null && $local != null){
            $equipos = 'SELECT e FROM InformaticaBundle:Equipo e   
                    JOIN e.responsable r                  
                    WHERE e.baja =:baja 
                    AND e.unidad =:unidad 
                    AND e.tipoEquipo=:tipo_equipo 
                    AND r.local=:local ORDER By r.local ASC';
            $equipos = $em->createQuery($equipos); 
            $equipos = $equipos
                        ->setParameter('baja', $baja)
                        ->setParameter('unidad', $unidad)
                        ->setParameter('tipo_equipo', $tipo_equipo)
                        ->setParameter('local', $local)
                        ->getResult();
            return $equipos;
        }		    
                
      
	}

        /*
        * Listado de Equipos por local 
        */
        public function getEquiposLocal($baja, $local){
                $em = $this->getEntityManager();    
                    
                $equipos = 'SELECT e FROM InformaticaBundle:Equipo e JOIN e.responsable r WHERE e.baja =:baja and r.local=:local ORDER By e.tipoEquipo ASC';
                $equipos = $em->createQuery($equipos); 
                $equipos = $equipos
                                ->setParameter('baja', $baja)
                                ->setParameter('local', $local)
                                ->getResult();
                return $equipos;        
        }

        public function getEquiposLocalEquipo($baja, $local, $equipo){

                $em = $this->getEntityManager();  
                    
                $equipos = 'SELECT e FROM InformaticaBundle:Equipo e JOIN e.responsable r JOIN e.tipoEquipo te WHERE te.id =:equipo and e.baja =:baja AND r.local =:local ORDER By e.tipoEquipo ASC';
                $equipos = $em->createQuery($equipos); 
                $equipos = $equipos
                                ->setParameter('baja', $baja)
                                ->setParameter('local', $local)
                                ->setParameter('equipo', $equipo->getTipoEquipo()->getId())
                                ->getResult();

                //print_r($equipos);

                return $equipos;

        }

        public function getEquiposLocalResponsableEquipo($baja, $local, $responsable, $equipo){
                $em = $this->getEntityManager();    
                    
                $equipos = 'SELECT e FROM InformaticaBundle:Equipo e 
                            JOIN e.responsable r 
                            JOIN e.tipoEquipo te WHERE r.id=:responsable and te.id=:equipo and e.baja =:baja and r.local=:local ORDER By e.tipoEquipo ASC';
                $equipos = $em->createQuery($equipos); 
                $equipos = $equipos
                                ->setParameter('baja', $baja)
                                ->setParameter('local', $local)
                                ->setParameter('responsable', $responsable->getId())
                                ->setParameter('equipo', $equipo->getTipoEquipo()->getId())
                                ->getResult();
                return $equipos;   
        }

        public function getEquiposLocalResponsable($baja, $local, $responsable){
                $em = $this->getEntityManager();    
                    
                $equipos = 'SELECT e FROM InformaticaBundle:Equipo e 
                            JOIN e.responsable r WHERE r.id=:responsable and e.baja =:baja and r.local=:local ORDER By e.tipoEquipo ASC';
                $equipos = $em->createQuery($equipos); 
                $equipos = $equipos
                                ->setParameter('baja', $baja)
                                ->setParameter('local', $local)
                                ->setParameter('responsable', $responsable->getId())                              
                                ->getResult();
                return $equipos;    
        }


	/*
	* Equipo en array
	*/
	public function getEquipoArray($id_equipo){

		$em = $this->getEntityManager();    

     
        $equipo_array = 'SELECT e.id, te.tipoEquipo, r.id idR,  r.responsable, l.local, a.area , e.medioBasico, e.noSubmayor, e.nombreEquipo, e.sello, ee.estado, e.observacion 
        		  FROM InformaticaBundle:Equipo e 
        		  JOIN e.tipoEquipo te 
        		  JOIN e.estadoEquipo ee
        		  JOIN e.responsable r 
        		  JOIN r.local l
                  JOIN l.area a
        		  WHERE e.id =:id
        		  ORDER By e.tipoEquipo ASC';
        $equipo_array = $em->createQuery($equipo_array); 
        $equipo_array = $equipo_array->setParameter('id', $id_equipo )->getSingleResult();

        return $equipo_array;        
	}


	public function getComputadorasDestino($equipo){
		$em = $this->getEntityManager();    

		$array = array();   
     
        $equipos = 'SELECT e.id, te.tipoEquipo, r.responsable, l.local, a.area, ee.estado, e.medioBasico, e.noSubmayor, e.nombreEquipo, e.sello, e.observacion FROM InformaticaBundle:Equipo e 
        			JOIN e.tipoEquipo te 
        			JOIN e.responsable r
        			JOIN r.local l
                    JOIN l.area a
        			JOIN e.estadoEquipo ee
        			WHERE e.id <> ?1 and e.tipoEquipo=:tipo ORDER By e.tipoEquipo ASC';
        $equipos = $em->createQuery($equipos); 
        $equipos = $equipos->setParameter(1, $equipo->getId())->setParameter('tipo', $equipo->getTipoEquipo())->getResult();

        return $equipos;
	}


    /*
    * listado Pcs de la Unidad
    */
    public function getPcs($unidad){

        $em = $this->getEntityManager();    
     
        $pcs = 'SELECT e FROM InformaticaBundle:Equipo e 
                WHERE 1 < (select count(i) from InformaticaBundle:InventarioEquipo i JOIN i.equipo ee WHERE ee.id = e.id) 
                AND e.unidad=:unidad';
        $pcs = $em->createQuery($pcs); 
        $pcs = $pcs
                ->setParameter( 'unidad', $unidad)
                ->getResult();
        return $pcs;
    }

    /*
    * obtener pc con monitor
    */
    public function getEquipoExpTec($unidad)
    {
        $em = $this->getEntityManager(); 
            $monitores = 'SELECT e FROM InformaticaBundle:Equipo e 
                          JOIN e.tipoEquipo tq WHERE tq.id= 2 and e.equipo IS NOT NULL  ORDER By e.medioBasico ASC';
            $monitores = $em->createQuery($monitores); 
            $monitores = $monitores                            
                            ->getResult();  
            return $monitores;
    }

}
